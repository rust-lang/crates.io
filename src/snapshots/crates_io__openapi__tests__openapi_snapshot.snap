---
source: src/openapi.rs
expression: response.json()
---
{
  "components": {
    "schemas": {
      "AuthenticatedUser": {
        "properties": {
          "avatar": {
            "description": "The user's avatar URL, if set.",
            "example": "https://avatars2.githubusercontent.com/u/1234567?v=4",
            "type": [
              "string",
              "null"
            ]
          },
          "email": {
            "description": "The user's email address, if set.",
            "example": "kate@morgan.dev",
            "type": [
              "string",
              "null"
            ]
          },
          "email_verification_sent": {
            "description": "Whether the user's email address verification email has been sent.",
            "example": true,
            "type": "boolean"
          },
          "email_verified": {
            "description": "Whether the user's email address has been verified.",
            "example": true,
            "type": "boolean"
          },
          "id": {
            "description": "An opaque identifier for the user.",
            "example": 42,
            "format": "int32",
            "type": "integer"
          },
          "is_admin": {
            "description": "Whether the user is a crates.io administrator.",
            "example": false,
            "type": "boolean"
          },
          "login": {
            "description": "The user's login name.",
            "example": "ghost",
            "type": "string"
          },
          "name": {
            "description": "The user's display name, if set.",
            "example": "Kate Morgan",
            "type": [
              "string",
              "null"
            ]
          },
          "publish_notifications": {
            "description": "Whether the user has opted in to receive publish notifications via email.",
            "example": true,
            "type": "boolean"
          },
          "url": {
            "description": "The user's GitHub profile URL.",
            "example": "https://github.com/ghost",
            "type": [
              "string",
              "null"
            ]
          }
        },
        "required": [
          "id",
          "login",
          "email_verified",
          "email_verification_sent",
          "is_admin",
          "publish_notifications"
        ],
        "type": "object"
      },
      "Category": {
        "properties": {
          "category": {
            "description": "The name of the category.",
            "example": "Game development",
            "type": "string"
          },
          "crates_cnt": {
            "description": "The total number of crates that have this category.",
            "example": 42,
            "format": "int32",
            "type": "integer"
          },
          "created_at": {
            "description": "The date and time this category was created.",
            "example": "2019-12-13T13:46:41Z",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "description": "A description of the category.",
            "example": "Libraries for creating games.",
            "type": "string"
          },
          "id": {
            "description": "An opaque identifier for the category.",
            "example": "game-development",
            "type": "string"
          },
          "parent_categories": {
            "description": "The parent categories of this category.\n\nThis field is only present when the category details are queried,\nbut not when listing categories.",
            "example": [],
            "items": {
              "$ref": "#/components/schemas/Category"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "slug": {
            "description": "The \"slug\" of the category.\n\nSee <https://crates.io/category_slugs>.",
            "example": "game-development",
            "type": "string"
          },
          "subcategories": {
            "description": "The subcategories of this category.\n\nThis field is only present when the category details are queried,\nbut not when listing categories.",
            "example": [],
            "items": {
              "$ref": "#/components/schemas/Category"
            },
            "type": [
              "array",
              "null"
            ]
          }
        },
        "required": [
          "id",
          "category",
          "slug",
          "description",
          "created_at",
          "crates_cnt"
        ],
        "type": "object"
      },
      "CrateOwnerInvitation": {
        "properties": {
          "crate_id": {
            "description": "The ID of the crate that the user was invited to be an owner of.",
            "example": 123,
            "format": "int32",
            "type": "integer"
          },
          "crate_name": {
            "description": "The name of the crate that the user was invited to be an owner of.",
            "example": "serde",
            "type": "string"
          },
          "created_at": {
            "description": "The date and time this invitation was created.",
            "example": "2019-12-13T13:46:41Z",
            "format": "date-time",
            "type": "string"
          },
          "expires_at": {
            "description": "The date and time this invitation will expire.",
            "example": "2020-01-13T13:46:41Z",
            "format": "date-time",
            "type": "string"
          },
          "invitee_id": {
            "description": "The ID of the user who was invited to be a crate owner.",
            "example": 42,
            "format": "int32",
            "type": "integer"
          },
          "inviter_id": {
            "description": "The ID of the user who sent the invitation.",
            "example": 3,
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "invitee_id",
          "inviter_id",
          "crate_id",
          "crate_name",
          "created_at",
          "expires_at"
        ],
        "type": "object"
      },
      "Keyword": {
        "properties": {
          "crates_cnt": {
            "description": "The total number of crates that have this keyword.",
            "example": 42,
            "format": "int32",
            "type": "integer"
          },
          "created_at": {
            "description": "The date and time this keyword was created.",
            "example": "2017-01-06T14:23:11Z",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "An opaque identifier for the keyword.",
            "example": "http",
            "type": "string"
          },
          "keyword": {
            "description": "The keyword itself.",
            "example": "http",
            "type": "string"
          }
        },
        "required": [
          "id",
          "keyword",
          "created_at",
          "crates_cnt"
        ],
        "type": "object"
      },
      "LegacyCrateOwnerInvitation": {
        "properties": {
          "crate_id": {
            "description": "The ID of the crate that the user was invited to be an owner of.",
            "example": 123,
            "format": "int32",
            "type": "integer"
          },
          "crate_name": {
            "description": "The name of the crate that the user was invited to be an owner of.",
            "example": "serde",
            "type": "string"
          },
          "created_at": {
            "description": "The date and time this invitation was created.",
            "example": "2019-12-13T13:46:41Z",
            "format": "date-time",
            "type": "string"
          },
          "expires_at": {
            "description": "The date and time this invitation will expire.",
            "example": "2020-01-13T13:46:41Z",
            "format": "date-time",
            "type": "string"
          },
          "invited_by_username": {
            "description": "The username of the user who sent the invitation.",
            "example": "ghost",
            "type": "string"
          },
          "invitee_id": {
            "description": "The ID of the user who was invited to be a crate owner.",
            "example": 42,
            "format": "int32",
            "type": "integer"
          },
          "inviter_id": {
            "description": "The ID of the user who sent the invitation.",
            "example": 3,
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "invitee_id",
          "inviter_id",
          "invited_by_username",
          "crate_name",
          "crate_id",
          "created_at",
          "expires_at"
        ],
        "type": "object"
      },
      "Slug": {
        "properties": {
          "description": {
            "description": "A description of the category.",
            "example": "Libraries for creating games.",
            "type": "string"
          },
          "id": {
            "description": "An opaque identifier for the category.",
            "example": "game-development",
            "type": "string"
          },
          "slug": {
            "description": "The \"slug\" of the category.\n\nSee <https://crates.io/category_slugs>.",
            "example": "game-development",
            "type": "string"
          }
        },
        "required": [
          "id",
          "slug",
          "description"
        ],
        "type": "object"
      },
      "User": {
        "properties": {
          "avatar": {
            "description": "The user's avatar URL, if set.",
            "example": "https://avatars2.githubusercontent.com/u/1234567?v=4",
            "type": [
              "string",
              "null"
            ]
          },
          "id": {
            "description": "An opaque identifier for the user.",
            "example": 42,
            "format": "int32",
            "type": "integer"
          },
          "login": {
            "description": "The user's login name.",
            "example": "ghost",
            "type": "string"
          },
          "name": {
            "description": "The user's display name, if set.",
            "example": "Kate Morgan",
            "type": [
              "string",
              "null"
            ]
          },
          "url": {
            "description": "The user's GitHub profile URL.",
            "example": "https://github.com/ghost",
            "type": "string"
          }
        },
        "required": [
          "id",
          "login",
          "url"
        ],
        "type": "object"
      }
    },
    "securitySchemes": {
      "api_token": {
        "description": "The API token is used to authenticate requests from cargo and other clients.",
        "in": "header",
        "name": "authorization",
        "type": "apiKey"
      },
      "cookie": {
        "description": "The session cookie is used by the web UI to authenticate users.",
        "in": "cookie",
        "name": "cargo_session",
        "type": "apiKey"
      }
    }
  },
  "info": {
    "contact": {
      "email": "help@crates.io",
      "name": "the crates.io team"
    },
    "description": "\n__Experimental API documentation for the [crates.io](https://crates.io/)\npackage registry.__\n\nThis document describes the API used by the crates.io website, cargo\nclient, and other third-party tools to interact with the crates.io\nregistry.\n\nBefore using this API, please read the\n[crates.io data access policy](https://crates.io/data-access) and ensure\nthat your use of the API complies with the policy.\n\n__The API is under active development and may change at any time__,\nthough we will try to avoid breaking changes where possible.\n\nSome parts of the API follow the \"Registry Web API\" spec documented\nat <https://doc.rust-lang.org/cargo/reference/registry-web-api.html>\nand can be considered stable.\n\nMost parts of the API do not require authentication. The endpoints\nthat do require authentication are marked as such in the documentation,\nwith some requiring cookie authentication (usable only by the web UI)\nand others requiring API token authentication (usable by cargo and\nother clients).\n",
    "license": {
      "name": "MIT OR Apache-2.0",
      "url": "https://github.com/rust-lang/crates.io/blob/main/README.md#%EF%B8%8F-license"
    },
    "termsOfService": "https://crates.io/policies",
    "title": "crates.io",
    "version": "0.0.0"
  },
  "openapi": "3.1.0",
  "paths": {
    "/api/private/crate_owner_invitations": {
      "get": {
        "operationId": "list_crate_owner_invitations",
        "parameters": [
          {
            "description": "Filter crate owner invitations by crate name.\n\nOnly crate owners can query pending invitations for their crate.",
            "in": "query",
            "name": "crate_name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the user who was invited to be a crate owner.\n\nThis parameter needs to match the authenticated user's ID.",
            "in": "query",
            "name": "invitee_id",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The page number to request.\n\nThis parameter is mutually exclusive with `seek` and not supported for\nall requests.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "The number of items to request per page.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "The seek key to request.\n\nThis parameter is mutually exclusive with `page` and not supported for\nall requests.\n\nThe seek key can usually be found in the `meta.next_page` field of\npaginated responses.",
            "in": "query",
            "name": "seek",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "invitations": {
                      "description": "The list of crate owner invitations.",
                      "items": {
                        "$ref": "#/components/schemas/CrateOwnerInvitation"
                      },
                      "type": "array"
                    },
                    "meta": {
                      "properties": {
                        "next_page": {
                          "description": "Query parameter string to fetch the next page of results.",
                          "example": "?seek=c0ffee",
                          "type": [
                            "string",
                            "null"
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "users": {
                      "description": "The list of users referenced in the crate owner invitations.",
                      "items": {
                        "$ref": "#/components/schemas/User"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "invitations",
                    "users",
                    "meta"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Successful Response"
          }
        },
        "security": [
          {
            "cookie": []
          }
        ],
        "summary": "List all crate owner invitations for a crate or user.",
        "tags": [
          "owners"
        ]
      }
    },
    "/api/private/session": {
      "delete": {
        "operationId": "end_session",
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "security": [
          {
            "cookie": []
          }
        ],
        "summary": "End the current session.",
        "tags": [
          "session"
        ]
      }
    },
    "/api/private/session/authorize": {
      "get": {
        "description": "This route is called from the GitHub API OAuth flow after the user accepted or rejected\nthe data access permissions. It will check the `state` parameter and then call the GitHub API\nto exchange the temporary `code` for an API token. The API token is returned together with\nthe corresponding user information.\n\nsee <https://developer.github.com/v3/oauth/#github-redirects-back-to-your-site>\n\n## Query Parameters\n\n- `code` – temporary code received from the GitHub API  **(Required)**\n- `state` – state parameter received from the GitHub API  **(Required)**\n\n## Response Body Example\n\n```json\n{\n    \"user\": {\n        \"email\": \"foo@bar.org\",\n        \"name\": \"Foo Bar\",\n        \"login\": \"foobar\",\n        \"avatar\": \"https://avatars.githubusercontent.com/u/1234\",\n        \"url\": null\n    }\n}\n```",
        "operationId": "authorize_session",
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "summary": "Complete authentication flow.",
        "tags": [
          "session"
        ]
      }
    },
    "/api/private/session/begin": {
      "get": {
        "description": "This route will return an authorization URL for the GitHub OAuth flow including the crates.io\n`client_id` and a randomly generated `state` secret.\n\nsee <https://developer.github.com/v3/oauth/#redirect-users-to-request-github-access>\n\n## Response Body Example\n\n```json\n{\n    \"state\": \"b84a63c4ea3fcb4ac84\",\n    \"url\": \"https://github.com/login/oauth/authorize?client_id=...&state=...&scope=read%3Aorg\"\n}\n```",
        "operationId": "begin_session",
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "summary": "Begin authentication flow.",
        "tags": [
          "session"
        ]
      }
    },
    "/api/v1/categories": {
      "get": {
        "operationId": "list_categories",
        "parameters": [
          {
            "description": "The sort order of the categories.\n\nValid values: `alpha`, and `crates`.\n\nDefaults to `alpha`.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The page number to request.\n\nThis parameter is mutually exclusive with `seek` and not supported for\nall requests.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "The number of items to request per page.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "The seek key to request.\n\nThis parameter is mutually exclusive with `page` and not supported for\nall requests.\n\nThe seek key can usually be found in the `meta.next_page` field of\npaginated responses.",
            "in": "query",
            "name": "seek",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "categories": {
                      "description": "The list of categories.",
                      "items": {
                        "$ref": "#/components/schemas/Category"
                      },
                      "type": "array"
                    },
                    "meta": {
                      "properties": {
                        "total": {
                          "description": "The total number of categories.",
                          "example": 123,
                          "format": "int64",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "total"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "categories",
                    "meta"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Successful Response"
          }
        },
        "summary": "List all categories.",
        "tags": [
          "categories"
        ]
      }
    },
    "/api/v1/categories/{category}": {
      "get": {
        "operationId": "find_category",
        "parameters": [
          {
            "description": "Name of the category",
            "in": "path",
            "name": "category",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "category": {
                      "$ref": "#/components/schemas/Category"
                    }
                  },
                  "required": [
                    "category"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Successful Response"
          }
        },
        "summary": "Get category metadata.",
        "tags": [
          "categories"
        ]
      }
    },
    "/api/v1/category_slugs": {
      "get": {
        "operationId": "list_category_slugs",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "category_slugs": {
                      "description": "The list of category slugs.",
                      "items": {
                        "$ref": "#/components/schemas/Slug"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "category_slugs"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Successful Response"
          }
        },
        "summary": "List all available category slugs.",
        "tags": [
          "categories"
        ]
      }
    },
    "/api/v1/confirm/{email_token}": {
      "put": {
        "operationId": "confirm_user_email",
        "parameters": [
          {
            "description": "Secret verification token sent to the user's email address",
            "in": "path",
            "name": "email_token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "ok": {
                      "example": true,
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "ok"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Successful Response"
          }
        },
        "summary": "Marks the email belonging to the given token as verified.",
        "tags": [
          "users"
        ]
      }
    },
    "/api/v1/crates": {
      "get": {
        "description": "Called in a variety of scenarios in the front end, including:\n- Alphabetical listing of crates\n- List of crates under a specific owner\n- Listing a user's followed crates",
        "operationId": "list_crates",
        "parameters": [
          {
            "description": "The sort order of the crates.\n\nValid values: `alphabetical`, `relevance`, `downloads`,\n`recent-downloads`, `recent-updates`, `new`.\n\nDefaults to `relevance` if `q` is set, otherwise `alphabetical`.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A search query string.",
            "in": "query",
            "name": "q",
            "required": false,
            "schema": {
              "description": "A string that does not contain null bytes (`\\0`).",
              "type": "string"
            }
          },
          {
            "description": "Set to `yes` to include yanked crates.",
            "example": "yes",
            "in": "query",
            "name": "include_yanked",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "If set, only return crates that belong to this category, or one\nof its subcategories.",
            "in": "query",
            "name": "category",
            "required": false,
            "schema": {
              "description": "A string that does not contain null bytes (`\\0`).",
              "type": "string"
            }
          },
          {
            "description": "If set, only return crates matching all the given keywords.\n\nThis parameter expects a space-separated list of keywords.",
            "in": "query",
            "name": "all_keywords",
            "required": false,
            "schema": {
              "description": "A string that does not contain null bytes (`\\0`).",
              "type": "string"
            }
          },
          {
            "description": "If set, only return crates matching the given keyword\n(ignored if `all_keywords` is set).",
            "in": "query",
            "name": "keyword",
            "required": false,
            "schema": {
              "description": "A string that does not contain null bytes (`\\0`).",
              "type": "string"
            }
          },
          {
            "description": "If set, only return crates with names that start with the given letter\n(ignored if `all_keywords` or `keyword` are set).",
            "in": "query",
            "name": "letter",
            "required": false,
            "schema": {
              "description": "A string that does not contain null bytes (`\\0`).",
              "type": "string"
            }
          },
          {
            "description": "If set, only crates owned by the given crates.io user ID are returned\n(ignored if `all_keywords`, `keyword`, or `letter` are set).",
            "in": "query",
            "name": "user_id",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "If set, only crates owned by the given crates.io team ID are returned\n(ignored if `all_keywords`, `keyword`, `letter`, or `user_id` are set).",
            "in": "query",
            "name": "team_id",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "If set, only crates owned by users the current user follows are returned\n(ignored if `all_keywords`, `keyword`, `letter`, `user_id`,\nor `team_id` are set).\n\nThe exact value of this parameter is ignored, but it must not be empty.",
            "example": "yes",
            "in": "query",
            "name": "following",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "If set, only crates with the specified names are returned (ignored\nif `all_keywords`, `keyword`, `letter`, `user_id`, `team_id`,\nor `following` are set).",
            "in": "query",
            "name": "ids[]",
            "required": false,
            "schema": {
              "items": {
                "description": "A string that does not contain null bytes (`\\0`).",
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "The page number to request.\n\nThis parameter is mutually exclusive with `seek` and not supported for\nall requests.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "The number of items to request per page.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "The seek key to request.\n\nThis parameter is mutually exclusive with `page` and not supported for\nall requests.\n\nThe seek key can usually be found in the `meta.next_page` field of\npaginated responses.",
            "in": "query",
            "name": "seek",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "security": [
          {},
          {
            "api_token": []
          },
          {
            "cookie": []
          }
        ],
        "summary": "Returns a list of crates.",
        "tags": [
          "crates"
        ]
      }
    },
    "/api/v1/crates/new": {
      "get": {
        "description": "This endpoint works around a small limitation in `axum` and is delegating\nto the `GET /api/v1/crates/{name}` endpoint internally.",
        "operationId": "find_new_crate",
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "summary": "Get crate metadata (for the `new` crate).",
        "tags": [
          "crates"
        ]
      },
      "put": {
        "description": "Used by `cargo publish` to publish a new crate or to publish a new version of an\nexisting crate.",
        "operationId": "publish",
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "security": [
          {
            "api_token": []
          },
          {
            "cookie": []
          }
        ],
        "summary": "Publish a new crate/version.",
        "tags": [
          "publish"
        ]
      }
    },
    "/api/v1/crates/{name}": {
      "delete": {
        "description": "The crate is immediately deleted from the database, and with a small delay\nfrom the git and sparse index, and the crate file storage.\n\nThe crate can only be deleted by the owner of the crate, and only if the\ncrate has been published for less than 72 hours, or if the crate has a\nsingle owner, has been downloaded less than 500 times for each month it has\nbeen published, and is not depended upon by any other crate on crates.io.",
        "operationId": "delete_crate",
        "parameters": [
          {
            "description": "Name of the crate",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "message",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "security": [
          {
            "cookie": []
          }
        ],
        "summary": "Delete a crate.",
        "tags": [
          "crates"
        ]
      },
      "get": {
        "operationId": "find_crate",
        "parameters": [
          {
            "description": "Name of the crate",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Additional data to include in the response.\n\nValid values: `versions`, `keywords`, `categories`, `badges`,\n`downloads`, `default_version`, or `full`.\n\nDefaults to `full` for backwards compatibility.\n\n**Note**: `versions` and `default_version` share the same key `versions`, therefore `default_version` will be ignored if both are provided.\n\nThis parameter expects a comma-separated list of values.",
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "summary": "Get crate metadata.",
        "tags": [
          "crates"
        ]
      }
    },
    "/api/v1/crates/{name}/downloads": {
      "get": {
        "description": "This includes the per-day downloads for the last 90 days and for the\nlatest 5 versions plus the sum of the rest.",
        "operationId": "get_crate_downloads",
        "parameters": [
          {
            "description": "Name of the crate",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Additional data to include in the response.\n\nValid values: `versions`.\n\nDefaults to no additional data.\n\nThis parameter expects a comma-separated list of values.",
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "summary": "Get the download counts for a crate.",
        "tags": [
          "crates"
        ]
      }
    },
    "/api/v1/crates/{name}/follow": {
      "delete": {
        "operationId": "unfollow_crate",
        "parameters": [
          {
            "description": "Name of the crate",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "ok": {
                      "example": true,
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "ok"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Successful Response"
          }
        },
        "security": [
          {
            "api_token": []
          },
          {
            "cookie": []
          }
        ],
        "summary": "Unfollow a crate.",
        "tags": [
          "crates"
        ]
      },
      "put": {
        "operationId": "follow_crate",
        "parameters": [
          {
            "description": "Name of the crate",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "ok": {
                      "example": true,
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "ok"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Successful Response"
          }
        },
        "security": [
          {
            "api_token": []
          },
          {
            "cookie": []
          }
        ],
        "summary": "Follow a crate.",
        "tags": [
          "crates"
        ]
      }
    },
    "/api/v1/crates/{name}/following": {
      "get": {
        "operationId": "get_following_crate",
        "parameters": [
          {
            "description": "Name of the crate",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "security": [
          {
            "cookie": []
          }
        ],
        "summary": "Check if a crate is followed.",
        "tags": [
          "crates"
        ]
      }
    },
    "/api/v1/crates/{name}/owner_team": {
      "get": {
        "operationId": "get_team_owners",
        "parameters": [
          {
            "description": "Name of the crate",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "summary": "List team owners of a crate.",
        "tags": [
          "owners"
        ]
      }
    },
    "/api/v1/crates/{name}/owner_user": {
      "get": {
        "operationId": "get_user_owners",
        "parameters": [
          {
            "description": "Name of the crate",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "summary": "List user owners of a crate.",
        "tags": [
          "owners"
        ]
      }
    },
    "/api/v1/crates/{name}/owners": {
      "delete": {
        "operationId": "remove_owners",
        "parameters": [
          {
            "description": "Name of the crate",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "security": [
          {
            "api_token": []
          },
          {
            "cookie": []
          }
        ],
        "summary": "Remove crate owners.",
        "tags": [
          "owners"
        ]
      },
      "get": {
        "operationId": "list_owners",
        "parameters": [
          {
            "description": "Name of the crate",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "summary": "List crate owners.",
        "tags": [
          "owners"
        ]
      },
      "put": {
        "operationId": "add_owners",
        "parameters": [
          {
            "description": "Name of the crate",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "security": [
          {
            "api_token": []
          },
          {
            "cookie": []
          }
        ],
        "summary": "Add crate owners.",
        "tags": [
          "owners"
        ]
      }
    },
    "/api/v1/crates/{name}/reverse_dependencies": {
      "get": {
        "operationId": "list_reverse_dependencies",
        "parameters": [
          {
            "description": "Name of the crate",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "summary": "List reverse dependencies of a crate.",
        "tags": [
          "crates"
        ]
      }
    },
    "/api/v1/crates/{name}/versions": {
      "get": {
        "operationId": "list_versions",
        "parameters": [
          {
            "description": "Name of the crate",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Additional data to include in the response.\n\nValid values: `release_tracks`.\n\nDefaults to no additional data.\n\nThis parameter expects a comma-separated list of values.",
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The sort order of the versions.\n\nValid values: `date`, and `semver`.\n\nDefaults to `semver`.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "If set, only versions with the specified semver strings are returned.",
            "in": "query",
            "name": "nums[]",
            "required": false,
            "schema": {
              "items": {
                "description": "A string that does not contain null bytes (`\\0`).",
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "The page number to request.\n\nThis parameter is mutually exclusive with `seek` and not supported for\nall requests.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "The number of items to request per page.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "The seek key to request.\n\nThis parameter is mutually exclusive with `page` and not supported for\nall requests.\n\nThe seek key can usually be found in the `meta.next_page` field of\npaginated responses.",
            "in": "query",
            "name": "seek",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "summary": "List all versions of a crate.",
        "tags": [
          "versions"
        ]
      }
    },
    "/api/v1/crates/{name}/{version}": {
      "get": {
        "operationId": "find_version",
        "parameters": [
          {
            "description": "Name of the crate",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Version number",
            "example": "1.0.0",
            "in": "path",
            "name": "version",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "summary": "Get crate version metadata.",
        "tags": [
          "versions"
        ]
      },
      "patch": {
        "description": "This endpoint allows updating the `yanked` state of a version, including a yank message.",
        "operationId": "update_version",
        "parameters": [
          {
            "description": "Name of the crate",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Version number",
            "example": "1.0.0",
            "in": "path",
            "name": "version",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "security": [
          {
            "api_token": []
          },
          {
            "cookie": []
          }
        ],
        "summary": "Update a crate version.",
        "tags": [
          "versions"
        ]
      }
    },
    "/api/v1/crates/{name}/{version}/authors": {
      "get": {
        "deprecated": true,
        "description": "This endpoint was deprecated by [RFC #3052](https://github.com/rust-lang/rfcs/pull/3052)\nand returns an empty list for backwards compatibility reasons.",
        "operationId": "get_version_authors",
        "parameters": [
          {
            "description": "Name of the crate",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Version number",
            "example": "1.0.0",
            "in": "path",
            "name": "version",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "summary": "Get crate version authors.",
        "tags": [
          "versions"
        ]
      }
    },
    "/api/v1/crates/{name}/{version}/dependencies": {
      "get": {
        "description": "This information can also be obtained directly from the index.\n\nIn addition to returning cached data from the index, this returns\nfields for `id`, `version_id`, and `downloads` (which appears to always\nbe 0)",
        "operationId": "get_version_dependencies",
        "parameters": [
          {
            "description": "Name of the crate",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Version number",
            "example": "1.0.0",
            "in": "path",
            "name": "version",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "summary": "Get crate version dependencies.",
        "tags": [
          "versions"
        ]
      }
    },
    "/api/v1/crates/{name}/{version}/download": {
      "get": {
        "description": "This returns a URL to the location where the crate is stored.",
        "operationId": "download_version",
        "parameters": [
          {
            "description": "Name of the crate",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Version number",
            "example": "1.0.0",
            "in": "path",
            "name": "version",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "summary": "Download a crate version.",
        "tags": [
          "versions"
        ]
      }
    },
    "/api/v1/crates/{name}/{version}/downloads": {
      "get": {
        "description": "This includes the per-day downloads for the last 90 days.",
        "operationId": "get_version_downloads",
        "parameters": [
          {
            "description": "Name of the crate",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Version number",
            "example": "1.0.0",
            "in": "path",
            "name": "version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Only return download counts before this date.",
            "example": "2024-06-28",
            "in": "query",
            "name": "before_date",
            "required": false,
            "schema": {
              "format": "date",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "summary": "Get the download counts for a crate version.",
        "tags": [
          "versions"
        ]
      }
    },
    "/api/v1/crates/{name}/{version}/readme": {
      "get": {
        "operationId": "get_version_readme",
        "parameters": [
          {
            "description": "Name of the crate",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Version number",
            "example": "1.0.0",
            "in": "path",
            "name": "version",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "summary": "Get the readme of a crate version.",
        "tags": [
          "versions"
        ]
      }
    },
    "/api/v1/crates/{name}/{version}/unyank": {
      "put": {
        "operationId": "unyank_version",
        "parameters": [
          {
            "description": "Name of the crate",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Version number",
            "example": "1.0.0",
            "in": "path",
            "name": "version",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "ok": {
                      "example": true,
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "ok"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Successful Response"
          }
        },
        "security": [
          {
            "api_token": []
          },
          {
            "cookie": []
          }
        ],
        "summary": "Unyank a crate version.",
        "tags": [
          "versions"
        ]
      }
    },
    "/api/v1/crates/{name}/{version}/yank": {
      "delete": {
        "description": "This does not delete a crate version, it makes the crate\nversion accessible only to crates that already have a\n`Cargo.lock` containing this version.\n\nNotes:\n\nVersion deletion is not implemented to avoid breaking builds,\nand the goal of yanking a crate is to prevent crates\nbeginning to depend on the yanked crate version.",
        "operationId": "yank_version",
        "parameters": [
          {
            "description": "Name of the crate",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Version number",
            "example": "1.0.0",
            "in": "path",
            "name": "version",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "ok": {
                      "example": true,
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "ok"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Successful Response"
          }
        },
        "security": [
          {
            "api_token": []
          },
          {
            "cookie": []
          }
        ],
        "summary": "Yank a crate version.",
        "tags": [
          "versions"
        ]
      }
    },
    "/api/v1/keywords": {
      "get": {
        "operationId": "list_keywords",
        "parameters": [
          {
            "description": "The sort order of the keywords.\n\nValid values: `alpha`, and `crates`.\n\nDefaults to `alpha`.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The page number to request.\n\nThis parameter is mutually exclusive with `seek` and not supported for\nall requests.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "The number of items to request per page.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "The seek key to request.\n\nThis parameter is mutually exclusive with `page` and not supported for\nall requests.\n\nThe seek key can usually be found in the `meta.next_page` field of\npaginated responses.",
            "in": "query",
            "name": "seek",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "keywords": {
                      "description": "The list of keywords.",
                      "items": {
                        "$ref": "#/components/schemas/Keyword"
                      },
                      "type": "array"
                    },
                    "meta": {
                      "properties": {
                        "total": {
                          "description": "The total number of keywords.",
                          "example": 123,
                          "format": "int64",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "total"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "keywords",
                    "meta"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Successful Response"
          }
        },
        "summary": "List all keywords.",
        "tags": [
          "keywords"
        ]
      }
    },
    "/api/v1/keywords/{keyword}": {
      "get": {
        "operationId": "find_keyword",
        "parameters": [
          {
            "description": "The keyword to find",
            "in": "path",
            "name": "keyword",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "keyword": {
                      "$ref": "#/components/schemas/Keyword"
                    }
                  },
                  "required": [
                    "keyword"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Successful Response"
          }
        },
        "summary": "Get keyword metadata.",
        "tags": [
          "keywords"
        ]
      }
    },
    "/api/v1/me": {
      "get": {
        "operationId": "get_authenticated_user",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "owned_crates": {
                      "description": "The crates that the authenticated user owns.",
                      "items": {
                        "properties": {
                          "email_notifications": {
                            "deprecated": true,
                            "type": "boolean"
                          },
                          "id": {
                            "description": "The opaque identifier of the crate.",
                            "example": 123,
                            "format": "int32",
                            "type": "integer"
                          },
                          "name": {
                            "description": "The name of the crate.",
                            "example": "serde",
                            "type": "string"
                          }
                        },
                        "required": [
                          "id",
                          "name",
                          "email_notifications"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "user": {
                      "$ref": "#/components/schemas/AuthenticatedUser",
                      "description": "The authenticated user."
                    }
                  },
                  "required": [
                    "user",
                    "owned_crates"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Successful Response"
          }
        },
        "security": [
          {
            "cookie": []
          }
        ],
        "summary": "Get the currently authenticated user.",
        "tags": [
          "users"
        ]
      }
    },
    "/api/v1/me/crate_owner_invitations": {
      "get": {
        "operationId": "list_crate_owner_invitations_for_user",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "crate_owner_invitations": {
                      "description": "The list of crate owner invitations.",
                      "items": {
                        "$ref": "#/components/schemas/LegacyCrateOwnerInvitation"
                      },
                      "type": "array"
                    },
                    "users": {
                      "description": "The list of users referenced in the crate owner invitations.",
                      "items": {
                        "$ref": "#/components/schemas/User"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "crate_owner_invitations",
                    "users"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Successful Response"
          }
        },
        "security": [
          {
            "cookie": []
          }
        ],
        "summary": "List all crate owner invitations for the authenticated user.",
        "tags": [
          "owners"
        ]
      }
    },
    "/api/v1/me/crate_owner_invitations/accept/{token}": {
      "put": {
        "operationId": "accept_crate_owner_invitation_with_token",
        "parameters": [
          {
            "description": "Secret token sent to the user's email address",
            "in": "path",
            "name": "token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "summary": "Accept a crate owner invitation with a token.",
        "tags": [
          "owners"
        ]
      }
    },
    "/api/v1/me/crate_owner_invitations/{crate_id}": {
      "put": {
        "operationId": "handle_crate_owner_invitation",
        "parameters": [
          {
            "description": "ID of the crate",
            "in": "path",
            "name": "crate_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "security": [
          {
            "api_token": []
          },
          {
            "cookie": []
          }
        ],
        "summary": "Accept or decline a crate owner invitation.",
        "tags": [
          "owners"
        ]
      }
    },
    "/api/v1/me/email_notifications": {
      "put": {
        "deprecated": true,
        "description": "This endpoint was implemented for an experimental feature that was never\nfully implemented. It is now deprecated and will be removed in the future.",
        "operationId": "update_email_notifications",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "ok": {
                      "example": true,
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "ok"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Successful Response"
          }
        },
        "security": [
          {
            "api_token": []
          },
          {
            "cookie": []
          }
        ],
        "summary": "Update email notification settings for the authenticated user.",
        "tags": [
          "users"
        ]
      }
    },
    "/api/v1/me/tokens": {
      "get": {
        "operationId": "list_api_tokens",
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "security": [
          {
            "cookie": []
          }
        ],
        "summary": "List all API tokens of the authenticated user.",
        "tags": [
          "api_tokens"
        ]
      },
      "put": {
        "operationId": "create_api_token",
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "security": [
          {
            "cookie": []
          }
        ],
        "summary": "Create a new API token.",
        "tags": [
          "api_tokens"
        ]
      }
    },
    "/api/v1/me/tokens/{id}": {
      "delete": {
        "operationId": "revoke_api_token",
        "parameters": [
          {
            "description": "ID of the API token",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "security": [
          {
            "api_token": []
          },
          {
            "cookie": []
          }
        ],
        "summary": "Revoke API token.",
        "tags": [
          "api_tokens"
        ]
      },
      "get": {
        "operationId": "find_api_token",
        "parameters": [
          {
            "description": "ID of the API token",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "security": [
          {
            "api_token": []
          },
          {
            "cookie": []
          }
        ],
        "summary": "Find API token by id.",
        "tags": [
          "api_tokens"
        ]
      }
    },
    "/api/v1/me/updates": {
      "get": {
        "operationId": "get_authenticated_user_updates",
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "security": [
          {
            "cookie": []
          }
        ],
        "summary": "List versions of crates that the authenticated user follows.",
        "tags": [
          "versions"
        ]
      }
    },
    "/api/v1/site_metadata": {
      "get": {
        "description": "Returns the current deployed commit SHA1 (or `unknown`), and whether the\nsystem is in read-only mode.",
        "operationId": "get_site_metadata",
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "summary": "Get crates.io metadata.",
        "tags": [
          "other"
        ]
      }
    },
    "/api/v1/summary": {
      "get": {
        "description": "This endpoint returns a summary of the most important data for the front\npage of crates.io.",
        "operationId": "get_summary",
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "summary": "Get front page data.",
        "tags": [
          "other"
        ]
      }
    },
    "/api/v1/teams/{team}": {
      "get": {
        "operationId": "find_team",
        "parameters": [
          {
            "description": "Name of the team",
            "example": "github:rust-lang:crates-io",
            "in": "path",
            "name": "team",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "summary": "Find team by login.",
        "tags": [
          "teams"
        ]
      }
    },
    "/api/v1/tokens/current": {
      "delete": {
        "description": "This endpoint revokes the API token that is used to authenticate\nthe request.",
        "operationId": "revoke_current_api_token",
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ],
        "summary": "Revoke the current API token.",
        "tags": [
          "api_tokens"
        ]
      }
    },
    "/api/v1/users/{id}/resend": {
      "put": {
        "operationId": "resend_email_verification",
        "parameters": [
          {
            "description": "ID of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "ok": {
                      "example": true,
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "ok"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Successful Response"
          }
        },
        "security": [
          {
            "api_token": []
          },
          {
            "cookie": []
          }
        ],
        "summary": "Regenerate and send an email verification token.",
        "tags": [
          "users"
        ]
      }
    },
    "/api/v1/users/{id}/stats": {
      "get": {
        "description": "This currently only returns the total number of downloads for crates owned\nby the user.",
        "operationId": "get_user_stats",
        "parameters": [
          {
            "description": "ID of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "total_downloads": {
                      "description": "The total number of downloads for crates owned by the user.",
                      "example": 123456789,
                      "format": "int64",
                      "minimum": 0,
                      "type": "integer"
                    }
                  },
                  "required": [
                    "total_downloads"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Successful Response"
          }
        },
        "summary": "Get user stats.",
        "tags": [
          "users"
        ]
      }
    },
    "/api/v1/users/{user}": {
      "get": {
        "operationId": "find_user",
        "parameters": [
          {
            "description": "Login name of the user",
            "in": "path",
            "name": "user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/User"
                    }
                  },
                  "required": [
                    "user"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Successful Response"
          }
        },
        "summary": "Find user by login.",
        "tags": [
          "users"
        ]
      },
      "put": {
        "description": "This endpoint allows users to update their email address and publish notifications settings.\n\nThe `id` parameter needs to match the ID of the currently authenticated user.",
        "operationId": "update_user",
        "parameters": [
          {
            "description": "ID of the user",
            "in": "path",
            "name": "user",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "ok": {
                      "example": true,
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "ok"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Successful Response"
          }
        },
        "security": [
          {
            "api_token": []
          },
          {
            "cookie": []
          }
        ],
        "summary": "Update user settings.",
        "tags": [
          "users"
        ]
      }
    }
  },
  "servers": [
    {
      "url": "https://crates.io"
    },
    {
      "url": "https://staging.crates.io"
    }
  ]
}
